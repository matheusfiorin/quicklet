let arg,inquirer,createProject;_276‍.x([["cli",()=>cli]]);_276‍.w("arg",[["default",["arg"],function(v){arg=v}]]);_276‍.w("inquirer",[["default",["inquirer"],function(v){inquirer=v}]]);_276‍.w("./main",[["createProject",["createProject"],function(v){createProject=v}]]);



function parseArgumentsIntoOptions(rawArgs) {
  const args = arg({
    '--name': String,
    '--git': Boolean,
    '--yes': Boolean,
    '--install': Boolean,
    '-g': '--git',
    '-y': '--yes',
    '-i': '--install',
  }, {
    argv: rawArgs.slice(2),
  });
  return {
    name: args['--name'] || '',
    skipPrompts: args['--yes'] || false,
    git: args['--git'] || false,
    template: args._[0],
    runInstall: args['--install'] || false,
  };
}

async function promptForMissingOptions(options) {
  const defaultTemplate = 'NodeJS API';
  if (options.skipPrompts) {
    return {
      ...options,
      template: options.template || defaultTemplate,
    };
  }

  const questions = [];
  if (!options.template) {
    questions.push({
      type: 'list',
      name: 'template',
      message: 'Please choose which project template to use',
      choices: ['NodeJS API', 'VueJS Basic', 'VueJS Dashboard', 'Go API'],
      default: defaultTemplate,
    });
  }

  if (!options.git) {
    questions.push({
      type: 'confirm',
      name: 'git',
      message: 'Initialize a git repository?',
      default: false,
    });
  }

  const answers = await inquirer.prompt(questions);
  return {
    ...options,
    template: options.template || answers.template,
    git: options.git || answers.git,
  };
}

       async function cli(args) {
  let options = parseArgumentsIntoOptions(args);
  options = await promptForMissingOptions(options);
  await createProject(options);
}